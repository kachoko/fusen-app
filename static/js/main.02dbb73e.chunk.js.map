{"version":3,"sources":["styles/SmallFusen.module.scss","styles/Header.module.scss","styles/AddTodo.module.scss","styles/TodosList.module.scss","fonts/uzura.ttf","components/AppButton.tsx","components/Header.tsx","components/AddTodo.tsx","controllers/Storage.ts","components/SmallFusen.tsx","components/TodosList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppButtonComponent","props","onClick","content","HeaderComponent","className","styles","header","AppButton","onClear","AddTodoComponent","useState","todo","setTodo","container","type","value","onChange","event","target","console","log","onAdd","saveTodoToLocalStorage","todos","JSON","stringify","localStorage","setItem","SmallFusenComponent","small","text","cut","pop","onDelete","index","TodosListComponent","map","item","SmallFusen","key","App","setTodos","useEffect","data","getItem","parse","getTodosFromLocalStorage","Header","removeItem","TodosList","idx","_todos","concat","splice","AddTodo","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,cAAc,gCAAgC,eAAe,iCAAiC,IAAM,wBAAwB,IAAM,0B,kBCAtLD,EAAOC,QAAU,CAAC,OAAS,yB,kCCA3BD,EAAOC,QAAU,CAAC,UAAY,6B,gBCA9BD,EAAOC,QAAU,CAAC,iBAAiB,oC,uECDnCD,EAAOC,QAAU,IAA0B,mC,uGCe5BC,EANY,SAACC,GACxB,OACI,4BAAQC,QAAS,WAAOD,EAAMC,YAAaD,EAAME,UCU1CC,EAbS,SAACH,GACvB,OACE,4BAAQI,UAAWC,IAAOC,QACtB,uCACA,mDACA,6BACE,kBAACC,EAAD,CAAoBL,QAAQ,qBAAMD,QAASD,EAAMQ,a,gCCU5CC,EAjBU,SAACT,GAAkC,IAAD,EACjCU,mBAAS,IADwB,mBAClDC,EADkD,KAC5CC,EAD4C,KASzD,OACE,4BAAQR,UAAWC,IAAOQ,WACxB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMK,SAAU,SAACC,GAAiBL,EAAQK,EAAMC,OAAOH,UACjF,4BAAQd,QATZ,WACEkB,QAAQC,IAAIT,GACZC,EAAQ,IACRZ,EAAMqB,MAAMV,KAMV,sBCJC,SAASW,EAAuBC,GACnC,IAAMR,EAAQS,KAAKC,UAAUF,GAC7BG,aAAaC,QAAQ,QAASZ,G,oBCEnBa,EAVa,SAAC5B,GAC3B,OACE,yBAAKI,UAAWC,IAAOwB,OACnB,8BAAO7B,EAAM8B,MACb,yBAAK1B,UAAWC,IAAO0B,MACvB,yBAAK3B,UAAWC,IAAO2B,IAAK/B,QAAS,WAAOD,EAAMiC,SAASjC,EAAMkC,Y,gBCW1DC,EAhBY,SAACnC,GAS1B,OACE,yBAAKI,UAAWC,IAAO,mBAPVL,EAAMuB,MAAMa,KAAI,SAACC,EAAMH,GAClC,OAAO,kBAACI,EAAD,CAAqBC,IAAKL,EAAOJ,KAAMO,EAAMH,MAAOA,EAAOD,SAAUjC,EAAMiC,gBCwCzEO,MA9Cf,WAAgB,IAAD,EAEkB9B,mBAAS,IAF3B,mBAENa,EAFM,KAECkB,EAFD,KAqCb,OAjCAC,qBAAU,WACRD,EHTG,WACH,IAAME,EAAOjB,aAAakB,QAAQ,SAClC,OAAKD,EAGEnB,KAAKqB,MAAMF,GAFP,GGMFG,MACR,CAACL,IAgCF,yBAAKrC,UAAWC,IAAOQ,WACrB,kBAACkC,EAAD,CAAiBvC,QAPrB,WHlBEkB,aAAasB,WAAW,SGoBxBP,EAAS,OAMP,kBAACQ,EAAD,CAAoB1B,MAAOA,EAAOU,SAftC,SAAoBiB,GAClB,IAAMC,EAAS5B,EAAM6B,SACrBD,EAAOE,OAAOH,EAAK,GACnBT,EAASU,GACT7B,EAAuB6B,MAYrB,kBAACG,EAAD,CAAkBjC,MAvBtB,SAAkBV,GAChB,IAAMwC,EAAS5B,EAAM6B,SACrBD,EAAOI,KAAK5C,GACZ8B,EAASU,GACT7B,EAAuB6B,QCjBPK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.02dbb73e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"small\":\"SmallFusen_small__1LAJU\",\"stick-fusen\":\"SmallFusen_stick-fusen__3xnBc\",\"write-letter\":\"SmallFusen_write-letter__ROJZt\",\"cut\":\"SmallFusen_cut__2PICl\",\"pop\":\"SmallFusen_pop__1Sbt0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1LeQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddTodo_container__3TZvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list-container\":\"TodosList_list-container__1pXPz\"};","module.exports = __webpack_public_path__ + \"static/media/uzura.047bdfea.ttf\";","import React from \"react\";\n// import styles from \"../styles/Header.module.scss\";\n\ntype AppButtonComponentProps = {\n    backgroundColor?: string,\n    content: string,\n    onClick: Function\n}\n\nconst AppButtonComponent = (props: AppButtonComponentProps) => {\n    return (\n        <button onClick={() => {props.onClick()}}>{props.content}</button>\n    );\n}\n\nexport default AppButtonComponent;\n","import React from \"react\";\nimport styles from \"../styles/Header.module.scss\";\nimport AppButtonComponent from \"./AppButton\";\n\ntype HeaderComponentProps = {\n  onClear: Function\n}\n\nconst HeaderComponent = (props: HeaderComponentProps) => {\n  return (\n    <header className={styles.header}>\n        <div>左</div>\n        <div>真ん中</div>\n        <div>\n          <AppButtonComponent content=\"クリア\" onClick={props.onClear} />\n          {/* <button onClick={() => { ; }}>クリア</button> */}\n        </div>\n    </header>\n  );\n}\n\nexport default HeaderComponent;\n","import React, { useState } from \"react\";\nimport styles from \"../styles/AddTodo.module.scss\";\n\ntype AddTodoComponentProps = {\n  onAdd: Function\n}\n\nconst AddTodoComponent = (props: AddTodoComponentProps) => {\n  const [todo, setTodo] = useState(\"\");\n\n  function addTodo() {\n    console.log(todo);\n    setTodo(\"\");\n    props.onAdd(todo);\n  }\n\n  return (\n    <footer className={styles.container}>\n      <input type=\"text\" value={todo} onChange={(event: any) => { setTodo(event.target.value) }} />\n      <button onClick={addTodo}>TODO追加</button>\n    </footer>\n  );\n}\n\nexport default AddTodoComponent;\n","/**\n * TODOを取得する\n */\nexport function getTodosFromLocalStorage() {\n    const data = localStorage.getItem(\"todos\");\n    if (!data) {\n        return [];\n    }\n    return JSON.parse(data);\n}\n\n/**\n * TODOを追加する\n * @param todos \n */\nexport function saveTodoToLocalStorage(todos: Array<string>) {\n    const value = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", value);\n}\n\nexport function clearTodosFromStorage() {\n    localStorage.removeItem(\"todos\");\n}\n","import React from \"react\";\nimport styles from \"../styles/SmallFusen.module.scss\";\n\ntype SmallFusenComponentProps = {\n    text: string,\n    index: number,\n    onDelete: Function\n}\n\nconst SmallFusenComponent = (props: SmallFusenComponentProps) => {\n  return (\n    <div className={styles.small}>\n        <span>{props.text}</span>\n        <div className={styles.cut}></div>\n        <div className={styles.pop} onClick={() => {props.onDelete(props.index)}}></div>\n    </div>\n  );\n}\n\nexport default SmallFusenComponent;\n","import React from \"react\";\nimport SmallFusenComponent from \"./SmallFusen\";\nimport styles from \"../styles/TodosList.module.scss\";\n\ntype TodosListComponentProps = {\n  todos: Array<string>,\n  onDelete: Function\n}\n\nconst TodosListComponent = (props: TodosListComponentProps) => {\n\n  function renderList() {\n    const list = props.todos.map((item, index) => {\n      return <SmallFusenComponent key={index} text={item} index={index} onDelete={props.onDelete} />;\n    });\n    return list;\n  }\n\n  return (\n    <div className={styles[\"list-container\"]}>\n      {renderList()}\n    </div>\n  );\n}\n\nexport default TodosListComponent;\n","import React, { useEffect, useState } from 'react';\nimport HeaderComponent from './components/Header';\nimport styles from \"./App.module.scss\";\nimport AddTodoComponent from './components/AddTodo';\nimport { getTodosFromLocalStorage, saveTodoToLocalStorage, clearTodosFromStorage } from './controllers/Storage';\nimport TodosListComponent from './components/TodosList';\n\nfunction App() {\n\n  const [todos, setTodos]: any = useState([]);\n\n  useEffect(() => {\n    setTodos(getTodosFromLocalStorage());\n  }, [setTodos]);\n\n  // function renderTodo() {\n  //   if (todos.length > 0) {\n  //     const lists = todos.map((item: string, index: number) => {\n  //       return <SmallFusenComponent key={index} text={item} index={index} onDelete={deleteTodo} />\n  //     });\n  //     return lists;\n  //   }\n  //   return null;\n  // }\n\n  function addTodos(todo: string) {\n    const _todos = todos.concat();\n    _todos.push(todo);\n    setTodos(_todos);\n    saveTodoToLocalStorage(_todos);\n  }\n\n  function deleteTodo(idx: number) {\n    const _todos = todos.concat();\n    _todos.splice(idx, 1);\n    setTodos(_todos);\n    saveTodoToLocalStorage(_todos);\n  }\n\n  function clearTodos() {\n    clearTodosFromStorage();\n    setTodos([]);\n  }\n\n  return (\n    <div className={styles.container}>\n      <HeaderComponent onClear={clearTodos} />\n      <TodosListComponent todos={todos} onDelete={deleteTodo} />\n      <AddTodoComponent onAdd={addTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/uzura.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}